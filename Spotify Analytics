--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table where I was able to insert data from Spotify into.
--Lastly, I performed analytics on this data using SQL.

--Created a table for spotify data.
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

--I then proceeded to insert the Spotify Data .csv into the table created above.

--Next, I explored the data using the following SQL..

SELECT * FROM BIT_DB.Spotifydata;

--Were there any artist that was on this list more than once?
SELECT artist_name, COUNT(artist_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

--Whats the average song duration(ms)?
SELECT avg(duration_ms) AS AVG_MS FROM BIT_DB.Spotifydata;

--What was the highest tempo and what place was this song ranked in?
SELECT artist_name, track_name, tempo FROM BIT_DB.Spotifydata
ORDER BY tempo DESC
LIMIT 1;

--What is the average loudness?
SELECT avg(loudness) FROM BIT_DB.Spotifydata;

--Calculate the average popularity for the artists in the Spotify date table.
--Then, for every artist with an average popularity of 90 or above, show their names, their average popularity, and label them as a "Top Star".

WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;
